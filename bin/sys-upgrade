#!/usr/bin/env sh
export LC_ALL=C

\. "$MBX_LIBPATH/_.sh" || exit 1
\. "$MBX_LIBPATH/tt.sh" || exit 1

sub() { sed "s/^/| /"; }

usage="$(cat << EOF
Usage: $(basename "$0") [OPTIONS]
Upgrades all packages of all supported package managers. Supports:

- nix-env
- apk
- apt-get
- dnf
- brew
- pacman
- gem
- npm / nvm / pm2
- flutter / fvm
- cargo / rustup
- git-src (optional)

OPTIONS
  -V,   --version                 Prints the version of this script suite (MBX).
  -v,   --verbose                 Prints verbose information.
  -g,   --gitsources              Also upgrades local git sources that have been installed via git-src (MBX).
  -x,   --extensive               Also runs extensions (*.sh files) within \$XDG_CONFIG_HOME/mbx/sys-upgrade/extensions and \$XDG_CONFIG_DIRS/mbx/sys-upgrade/extensions.
  -r,   --reboot                  Reboots the system after successful upgrade.
  -h,   --help                    Prints this help message.
EOF
)"

while [ "$#" -gt 0 ]; do
	case "$1" in
		-V|--version) echo $MBX_VERSION && exit 0 ;;
		-v|--verbose) verbose=1 ;;
		-g|--gitsources) gitsources=1 ;;
		-x|--extensive) extensive=1 ;;
		-r|--reboot) reboot=1 ;;
		-h|--help) echo "$usage" && exit 129 ;;
		*) echo ! Invalid command line flag $1. >&2; exit 1 ;;
	esac
	shift
done

test $verbose && set -x
set -e
OIFS="$IFS"

while true; do erun test 0; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

if testcmd nix-env; then
	echo +-- Upgrading local nix packages ...
	nix-env -u '*' | sub
	# TODO: Handle NixOS
	echo +--
fi

if testcmd apk; then
	echo +-- Upgrading apk packages ...
	erun apk add --update apk-tools | sub
	erun apk upgrade --available | sub
	rm /var/cache/apk/* | sub
	echo +--
fi

if testcmd apt-get; then
	echo +-- Upgrading apt packages ...
	erun apt-get update | sub
	erun apt-get dist-upgrade -y | sub
	erun apt-get autoremove -y | sub
	erun apt-get clean | sub
	echo +--
fi

if testcmd dnf; then
	echo +-- Upgrading RedHat packages ... erun dnf up --refresh -y | sub
	erun dnf autoremove -y | sub
	echo +--
elif testcmd yum; then
	echo +-- Upgrading RedHat packages ...
	erun yum check-update | sub
	erun yum upgrade -y | sub
	echo +--
fi

if testcmd brew; then
	echo +-- Upgrading brew packages ...
	brew update | sub
	brew upgrade | sub
	brew upgrade --cask | sub
	brew autoremove | sub
	brew cleanup | sub
	echo +--
fi

if testcmd pacman; then
	echo +-- Upgrading pacman packages ...
	pacman -Syu
	echo +--
fi

if testcmd pip; then
	echo +-- Updating pip ...
	python3 -m pip install --upgrade pip | sub
	echo +--
fi

if testcmd gem; then
	if testcmd rvm; then
		echo +-- Upgrading rvm ...
		rvm get stable | sub
		# echo +-- Switching to default Ruby version ...
		# . $HOME/.rvm/scripts/rvm
		# rvm use default | sub
		echo +-- Upgrading RubyGems system software ...
		update_rubygems | sub
		gem update --system | sub
		echo +-- Upgrading global ruby gems ...
		gem update | sub
	else
		echo +-- Upgrading RubyGems system software ...
		erun update_rubygems | sub
		erun gem update --system | sub
		echo +-- Upgrading global ruby gems ...
		erun gem update | sub
	fi
	echo +--
fi

if [ -s "$HOME/.nvm/nvm.sh" ]; then
	\. "$NVM_DIR/nvm.sh" # ensure nvm is loaded
fi
if testcmd npm; then
	if testcmd nvm; then
		echo +-- Upgrading node minors ...
		nvm install $(nvm current | sed -rn "s/v([[:digit:]]+).*/\1/p") --reinstall-packages-from=$(nvm current) | sub || true
		nvm install $(nvm current) | sub # upgrade default-packages to major version
		# TODO: Replace last command with better alternative, see https://github.com/npm/cli/issues/2329#issuecomment-743308323
		echo +--
	fi
	echo +-- Upgrading global npm packages \(minor\) ...
	for val in $(npm list -g --depth 0 | awk '/ /{print $2}'); do
		npm i -g --force $(echo $val | tr "." "\n" | head -1) | sub
	done
	echo +--
	if testcmd pm2; then
		pm2 update | sub
	fi
fi

if testcmd nativefier; then
	if [ -n "$NATIVEFIER_APPS_DIR" ]; then
		echo +-- Upgrading electron in nativefier applications ...
		IFS=$'\n'
		if [[ "$(tolower "$OSTYPE")" == "darwin"* ]]; then
			for d in ${NATIVEFIER_APPS_DIR%/}/*; do
				for f in $(ls -1F "$d" | grep "\.app/"); do
					app="$d/${f//\/}"
					if [ -d "$app/Contents/Frameworks/Electron Framework.framework" ]; then
						echo \| - Upgrading $app ...
						erun nativefier --upgrade "$app" | sub
					fi
				done
			done
		else
			for d in ${NATIVEFIER_APPS_DIR%/}/*; do
				if [ -f "$d/v8_context_snapshot.bin" ]; then
					for f in $(ls -1F "$d" | grep "*"); do
						app=$d/${f//\*}
						echo - Upgrading $app ...
						erun nativefier --upgrade "$app" | sub
					done
				fi
			done
		fi
		IFS="$OIFS"
		echo +--
	else
		echo - Found nativefier, but NATIVEFIER_APPS_DIR is unset, so electron upgrades of nativefier applications will be skipped.
	fi
fi

if testcmd fvm; then
	echo +-- Upgrading Flutter ...
	fvm global beta | sub
	fvm flutter upgrade | sub
	dart pub global activate rps | sub
	fvm global stable | sub
	fvm flutter upgrade | sub
	dart pub global activate rps | sub
	echo +--
elif testcmd flutter; then
	echo +-- Upgrading Flutter ...
	flutter upgrade | sub
	dart pub global activate rps | sub
	echo +--
fi

if testcmd rustup; then
	echo +-- Upgrading Rust ...
	rustup update | sub
	echo +--
	echo +-- Upgrading global cargo packages ...
	cargo install $(cargo install --list | egrep '^[a-z0-9_-]+ v[0-9.]+:$' | cut -f1 -d' ') | sub
	echo +--
fi

if [ $gitsources ]; then
	echo +-- Upgrading git sources ...
	"$MBX_PATH/bin/git-src" ls | xargs -L1 "$MBX_PATH/bin/git-src" up | sub
	echo +--
fi

if [ $extensive ]; then
	echo +-- Upgrading miscellaneous files ...
	extsubpath="mbx/sys-upgrade/extensions"
	extdir="$XDG_CONFIG_HOME/$extsubpath" 
	if [ -d "$extdir" ]; then
		for f in $(find "$extdir" -mindepth 1 -maxdepth 1 -type f -name '*.sh'); do
			# echo $f
			test -f "$f" && { . "$f" | sub || { echo ! Failed to source $f && exit 1; }; }
		done 
	fi
	( IFS=: 
	for confdir in $XDG_CONFIG_DIRS; do
		extdir="$confdir/$extsubpath"
		if [ -d "$extdir" ]; then
			extfiles=$(find "$extdir" -mindepth 1 -maxdepth 1 -type f -name '*.sh')
			for f in $extfiles; do
				# echo $f
				test -f "$f" && { . "$f" | sub || { echo ! Failed to source $f && exit 1; }; }
			done 
		fi
	done; )
	echo +--
fi

if [ $reboot ]; then
	echo - Rebooting ...
	erun reboot
fi

set +e && set +x && echo - Done!

