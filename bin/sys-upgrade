#!/usr/bin/env sh

\. "$MBX_LIBPATH/_.sh" || exit 1
\. "$MBX_LIBPATH/tt.sh" || exit 1

read -r -d '' usage << EOF
Usage: $(basename "$0") [OPTIONS]
Upgrades all packages of all supported package managers. Supports:

- apt-get
- dnf
- brew
- gem
- npm / nvm
- flutter / fvm
- rustup

OPTIONS
  -V,   --version                 Prints the version of this script suite (MBX).
  -v,   --verbose                 Prints verbose information.
  -x,   --extensive               Also runs extensions (*.sh files) within \$XDG_CONFIG_HOME/mbx/sys-upgrade/extensions and \$XDG_CONFIG_DIRS/mbx/sys-upgrade/extensions.
  -r,   --reboot                  Reboots the system after successful upgrade.
  -h,   --help                    Prints this help message.
EOF

while [ "$#" -gt 0 ]; do
	case "$1" in
		-V|--version) echo $MBX_VERSION && exit 0 ;;
		-v|--verbose) verbose=1 ;;
		-x|--extensive) extensive=1 ;;
		-r|--reboot) reboot=1 ;;
		-h|--help) echo "$usage" && exit 0 ;;
		*) echo ! Invalid command line flag $1. >&2; exit 1 ;;
	esac
	shift
done

test $verbose && set -x
set -e
OIFS="$IFS"

erun echo - Requested root permissions for priviledged tasks.

if testc apk; then
	echo - Upgrading APK packages ...
	erun apk update
	erun apk upgrade
fi

if testc apt-get; then
	echo - Upgrading APT packages ...
	erun apt-get update
	erun apt-get dist-upgrade -y
	erun apt-get autoremove -y
	erun apt-get clean
fi

if testc dnf; then
	echo - Upgrading Red Hat packages ...
	erun dnf up --refresh -y
	erun dnf autoremove -y
elif testc yum; then
	echo - Upgrading Red Hat packages ...
	erun yum check-update
	erun yum upgrade -y
fi

if testc brew; then
	echo - Upgrading Homebrew packages ...
	brew update
	brew upgrade
	brew upgrade --cask
	brew autoremove
	brew cleanup
fi

if testc gem; then
	if testc rbenv; then
		current_ruby_version=$(rbenv global)
		installed_ruby_versions=($(rbenv versions | awk -F "[ ]+" '/ /{print $2}'))
		available_ruby_versions=($(rbenv install -l 2>/dev/null))
		echo - Updating Ruby builds ...
		for installed in "${installed_ruby_versions[@]}"; do
			if [ "$installed" = "system" ]; then
				continue
			fi
			for available in "${available_ruby_versions[@]}"; do
				if [ "$installed" = "$available" ]; then
					continue
				fi
				if [ \
					"$(echo $installed | tr '.' '\n' | head -2)" \
					= \
					"$(echo $available | tr '.' '\n' | head -2)" \
					]; then
									rbenv install $available
									# TODO: Install all global packages from $installed to $available
									if [ "$current_ruby_version" = "$installed" ]; then
										rbenv global $available
									fi
									erun rbenv uninstall -f $installed
				fi
			done
		done
	fi
	echo - Upgrading global Ruby gems ...
	erun gem update --system
fi

if [ -s "$HOME/.nvm/nvm.sh" ]; then
	\. "$NVM_DIR/nvm.sh" # ensure nvm is loaded
fi
if testc npm; then
	if testc nvm; then
		echo - Upgrading node minors ...
		nvm install $(nvm current | sed -rn "s/v([[:digit:]]+).*/\1/p") --reinstall-packages-from=$(nvm current) || true
		nvm install $(nvm current) # upgrade default-packages to major version
		# TODO: Replace last command with better alternative, see https://github.com/npm/cli/issues/2329#issuecomment-743308323
	else
		echo ! nvm script found, but unable to load nvm! >&2
		exit 1
	fi
	npm_global_packages=($(npm list -g --depth 0 | awk '/ /{print $2}'))
	echo "- Upgrading global npm packages (minor) ..."
	for val in "${npm_global_packages[@]}"; do
		npm i -g --force $(echo $val | tr "." "\n" | head -1)
	done
fi

# if testc nativefier; then
# 	if [ -n "$NATIVEFIER_APPS_DIR" ]; then
# 		echo - Upgrading electron in nativefier applications ...
# 		IFS=$'\n'
# 		if [[ "$(tolower "$OSTYPE")" == "darwin"* ]]; then
# 			for d in ${NATIVEFIER_APPS_DIR%/}/*; do
# 				for f in $(ls -1F "$d" | grep "\.app/"); do
# 					app="$d/${f//\/}"
# 					if [ -d "$app/Contents/Frameworks/Electron Framework.framework" ]; then
# 						echo Upgrading $app ...
#						erun nativefier --upgrade "$app"
# 					fi
# 				done
# 			done
# 		else
# 			for d in ${NATIVEFIER_APPS_DIR%/}/*; do
# 				if [ -f "$d/v8_context_snapshot.bin" ]; then
# 					for f in $(ls -1F "$d" | grep "*"); do
# 						app=$d/${f//\*}
# 						echo Upgrading $app ...
#						erun nativefier --upgrade "$app"
# 					done
# 				fi
# 			done
# 		fi
# 		IFS="$OIFS"
# 	else
# 		echo [i] Found nativefier, but NATIVEFIER_APPS_DIR is unset, so electron upgrades of nativefier applications will be skipped.
# 	fi
# fi
# TODO: Outcomment when https://github.com/nativefier/nativefier/issues/1347 is closed

if testc fvm; then
	echo - Upgrading Flutter ...
	fvm install beta
	fvm install stable
	dart pub global activate rps
elif testc flutter; then
	echo - Upgrading Flutter ...
	flutter upgrade
	dart pub global activate rps
fi

if testc rustup; then
	echo - Upgrading Rust ...
	rustup update
fi

if [ $extensive ]; then
	extsubpath="mbx/sys-upgrade/extensions"
	extdir="$XDG_CONFIG_HOME/$extsubpath" 
	if [ -d "$extdir" ]; then
		extfiles=( $(find "$extdir" -mindepth 1 -maxdepth 1 -type f -name '*.sh') )
		for f in "${extfiles[@]}"; do
			# echo $f
			[ -f "$f" ] && { . "$f" || { echo [!] Failed to source $f && exit 1; }; }
		done 
	fi
	( IFS=: 
	for confdir in $XDG_CONFIG_DIRS; do
		extdir="$confdir/$extsubpath"
		if [ -d "$extdir" ]; then
			extfiles=( $(find "$extdir" -mindepth 1 -maxdepth 1 -type f -name '*.sh') )
			for f in "${extfiles[@]}"; do
				# echo $f
				[ -f "$f" ] && { . "$f" || { echo [!] Failed to source $f && exit 1; }; }
			done 
		fi
	done; )
fi

if [ $reboot ]; then
	echo - Rebooting ...
	erun reboot
fi

set +e && set +x && echo - Done!

