#!/bin/bash

. "$MBX_LIBPATH/_.bash" || exit 1

read -r -d '' usage << EOF
Usage: $(basename "$0") [OPTIONS]
Upgrades the entire system.

OPTIONS
  -V,   --version                 Prints the version of this script suite (MBX).
  -v,   --verbose                 Prints verbose information.
  -h,   --help                    Prints this help message.
EOF

while [ "$#" -gt 0 ]; do
	case "$1" in
		-V|--version) echo $MBX_VERSION && exit 0 ;;
		-v|--verbose) verbose=1 ;;
		-h|--help) echo "$usage" && exit 0 ;;
		*) echo "[x] Invalid command line flag $1" >&2; exit 1 ;;
	esac
	shift
done

test $verbose && trap 'echo "[o] $BASH_COMMAND"' DEBUG
set -e

if test-command apt-get; then
	echo "[o] Upgrading apt packages ..."
	if test-command sudo; then
		sudo apt-get update
		sudo apt-get dist-upgrade -y
		sudo apt-get autoremove -y
		sudo apt-get clean
	else
		apt-get update
		apt-get dist-upgrade -y
		apt-get autoremove -y
		apt-get clean
	fi
fi

if test-command brew; then
	echo "[o] Upgrading Homebrew packages ..."
	brew update
	brew upgrade
	brew upgrade --cask
	brew autoremove
	brew cleanup
fi

if test-command npm; then
	echo "[o] Upgrading global NPM packages ..."
	npm update -g npm
fi

if test-command gem; then
	echo "[o] Upgrading global Ruby gems ..."
	gem update --system
fi

if test-command fvm; then
	echo "[o] Upgrading Flutter ..."
	fvm global beta
	fvm flutter upgrade
	fvm global stable
	fvm flutter upgrade
elif test-command flutter; then
	echo "[o] Upgrading Flutter ..."
	flutter upgrade
fi

set +e && trap - DEBUG && echo "[o] Done!"
