#!/bin/bash
#
# Recursively changes modes on directories and files individually.

. "$MBX_LIBPATH/_ext.bash"

terminator=+
while [ "$#" -gt 0 ]; do
	case "$1" in
		-V|--version) echo $MBX_VERSION && exit 0 ;;
		-v|--verbose) verbose=1 ;;
		-d=*|--directory-permissions=*) directory_permissions="${1#*=}" ;;
		-f=*|--file-permissions=*) file_permissions="${1#*=}" ;;
		-c|--claim-ownership) claim_ownership=1 ;;
		-s|--slow-mode) terminator=\; ;;
		-h|--help)
			echo "Usage: $(basename "$0") [OPTIONS] [PATH]"
			echo "Recursively changes modes on directories and files individually."
			echo ""
			echo "OPTIONS"
			echo "  -V,   --version                 Prints the version of this script suite (MBX)."
			echo "  -v,   --verbose                 Prints verbose information."
			echo "  -d=*, --directory-permissions=* Sets the directory permissions."
			echo "  -f=*, --file-permissions=*      Sets the file permissions."
			echo "  -c,   --claim-ownership         Claim ownership of the directories and files."
			echo "  -s,   --slow-mode               Concatinate directories and files for two commands in total."
			echo "  -h,   --help                    Prints this help message."
			echo ""
			echo "PATH"
			echo "  The path to the directory or file to change."
			echo ""
			echo "PERMISSION MODES"
			echo "     Modes may be absolute or symbolic.  An absolute mode is an octal number constructed from the sum of one or more of
     the following values:
           4000    (the setuid bit).  Executable files with this bit set will run with effective uid set to the uid of the
                   file owner.  Directories with this bit set will force all files and sub-directories created in them to
                   be owned by the directory owner and not by the uid of the creating process, if the underlying file
                   system supports this feature: see chmod(2) and the suiddir option to mount(8).
           2000    (the setgid bit).  Executable files with this bit set will run with effective gid set to the gid of the
                   file owner.
           1000    (the sticky bit).  See chmod(2) and sticky(7).
           0400    Allow read by owner.
           0200    Allow write by owner.
           0100    For files, allow execution by owner.  For directories, allow the owner to search in the directory.
           0040    Allow read by group members.
           0020    Allow write by group members.
           0010    For files, allow execution by group members.  For directories, allow group members to search in the
                   directory.
           0004    Allow read by others.
           0002    Allow write by others.
           0001    For files, allow execution by others.  For directories allow others to search in the directory.

     For example, the absolute mode that permits read, write and execute by the owner, read and execute by group members,
     read and execute by others, and no set-uid or set-gid behaviour is 755 (400+200+100+040+010+004+001)."
			exit 0
			;;
		*) { test -z $path && path=$1; } || { echo "Invalid command line flag $1" >&2 && exit 1; } ;;
	esac
	shift
done
test $verbose && trap 'echo "◊ $BASH_COMMAND"' DEBUG
set -e

if [ -z "$path" ]; then
	echo "No path specified" >&2
	exit 1
fi

if [ ! -f "$path" ]; then
	echo "» Changing modes on directories within and incl. $path ..."
	if test-command sudo; then
		sudo find "$path" -type f -exec chmod $file_permissions '{}' $terminator
	else
		find "$path" -type f -exec chmod $file_permissions '{}' $terminator
	fi
	echo "» Changing modes on files within $path ..."
	if test-command sudo; then
		sudo find "$path" -type d -exec chmod $directory_permissions '{}' $terminator
	else
		find "$path" -type d -exec chmod $directory_permissions '{}' $terminator
	fi
else
	echo "» Changing modes on $path ..."
	if test-command sudo; then
		sudo chmod $file_permissions "$path"
	else
		chmod $file_permissions "$path"
	fi
fi

if (( $claim_ownership )); then
	echo "» Claiming ownership of $path ..."
	if test-command sudo; then
		sudo chown -R "$(whoami)" $path
	else
		chown -R "$(whoami)" $path
	fi
fi


set +e && trap - DEBUG && echo "» Done!"
