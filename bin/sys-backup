#!/usr/bin/env bash

. "$MBX_LIBPATH/_.bash" || exit 1
. "$MBX_LIBPATH/tt.bash" || exit 1

read -r -d '' usage << EOF
Usage: $(basename "$0") [OPTIONS]
Backups all files given a certain maximum size from the root directory of this system.
On MacOS launches Time Maschine backup instead.

OPTIONS
  -V,   --version                 Prints the version of this script suite (MBX).
  -v,   --verbose                 Prints verbose information.
  -p=*, --path=*                  Sets the path to the backup directory if possible (default: $HOME/.sys-backup). Ignored on MacOS.
  -m=*, --max-size=*              Sets the maximum size of every backup-ed file (default: 10M). Ignored on MacOS.
  -k,   --keep-files              Keeps the old backup files that are not overwritten. Ignored on MacOS.
  -x,   --extensive               Also runs extensions (*.sh files) within \$XDG_CONFIG_HOME/mbx/sys-backup/extensions and \$XDG_CONFIG_DIRS/mbx/sys-backup/extensions.
  -l,   --lock-backup             Locks the backup by rejecting access permissions to the current user. Ignored on MacOS.
  -s,   --shutdown                Shutdowns the system 5 minutes after successful system backup.
  -h,   --help                    Prints this help message.
EOF

path="$HOME/.sys-backup"
max_size="10M"

while [ "$#" -gt 0 ]; do
	case "$1" in
		-V|--version) echo $MBX_VERSION && exit 0 ;;
		-v|--verbose) verbose=1 ;;
		-p=*|--path=*) path="${1#*=}" ;;
		-m=*|--max-size=*) max_size="${1#*=}" ;;
		-k|--keep-files) keep_files=1 ;;
		-l|--lock-backup) lock_backup=1 ;;
		-s|--shutdown) shutdown=1 ;;
		-h|--help) echo "$usage" && exit 0 ;;
		*) echo [x] Invalid command line flag $1. >&2; exit 1 ;;
	esac
	shift
done

test $verbose && trap 'echo "[$] $BASH_COMMAND"' DEBUG
set -e

if [[ "$(tolower "$OSTYPE")" == "darwin"* ]]; then # MacOS uses Time Maschine for backups instead
	echo [o] Backing up using Time Maschine ...
	if (( $shutdown )); then
		sudo zsh -c "tmutil startbackup --block && shutdown -h +5"
		echo; read -rsn1 -p "Press any key to cancel ..."; echo
		sudo killall shutdown
	else
		tmutil startbackup
	fi
	exit
fi

echo [o] Creating backup directory ...
mkdir -p "$path"
if testc sudo; then
	sudo chmod 1700 "$path"
else
	chmod 1700 "$path"
fi

echo [o] Backing up files ...
excl=( "$path" /dev /proc /sys /tmp /run /mnt /media /lost+found )
if [[ "$(tolower "$OSTYPE")" == "darwin"* ]]; then # MacOS
	excl+=( /Volumes /Network /System /Applications /AppleInternal .DS_Store .AppleDouble .LSOverride )
	opts="-aEH"
else # Others
	excl+=( /var/lib/lxcfs /var/lib/vz ) # proxmox dumps
	opts="-aAXH"
fi
for i in "${!excl[@]}"; do
	excl[i]="--exclude=${excl[i]}"
done
(( $verbose )) && opts+="v"
if testc sudo; then
	sudo rsync $opts --delete --max-size=$max_size "${excl[@]}" / "$path"
	(( $keep_files )) || sudo find "$path" -type f -size +$max_size -delete
else
	rsync $opts --delete --max-size=$max_size "${excl[@]}" / "$path"
	(( $keep_files )) || find "$path" -type f -size +$max_size -delete
fi

if [ $extensive ]; then
	extsubpath="mbx/sys-backup/extensions"
	extdir="$XDG_CONFIG_HOME/$extsubpath" 
	if [ -d "$extdir" ]; then
		extfiles=( $(find "$extdir" -mindepth 1 -maxdepth 1 -type f -name '*.sh') )
		for f in "${extfiles[@]}"; do
			# echo $f
			[ -f "$f" ] && { . "$f" || { echo "[!] Failed to source $f" && exit 1; }; }
		done 
	fi
	( IFS=: 
	for confdir in $XDG_CONFIG_DIRS; do
		extdir="$confdir/$extsubpath"
		if [ -d "$extdir" ]; then
			extfiles=( $(find "$extdir" -mindepth 1 -maxdepth 1 -type f -name '*.sh') )
			for f in "${extfiles[@]}"; do
				# echo $f
				[ -f "$f" ] && { . "$f" || { echo "[!] Failed to source $f" && exit 1; }; }
			done 
		fi
	done; )
fi

if [ $lock_backup ]; then
	echo [o] Locking backup directory ...
	if testc sudo; then
		sudo chmod 0000 "$path"
	else
		chmod 0000 "$path"
	fi
fi

if (( $shutdown )); then
	if testc sudo; then
		sudo shutdown +5
		echo; read -rsn1 -p "Press any key to cancel ..."; echo
		sudo killall shutdown
	else
		shutdown +5
		echo; read -rsn1 -p "Press any key to cancel ..."; echo
		killall shutdown
	fi	
fi

set +e && trap - DEBUG && echo [o] Done!

