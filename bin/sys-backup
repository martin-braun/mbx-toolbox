#!/bin/bash
#
# Backups all files given a certain maximum size from the root directory of this system.

. "$MBX_LIBPATH/_ext.bash"
. "$MBX_LIBPATH/tt.bash"

path="$HOME/.sys-backup"
max_size="10M"
while [ "$#" -gt 0 ]; do
	case "$1" in
		-V|--version) echo $MBX_VERSION && exit 0 ;;
		-v|--verbose) verbose=1 ;;
		-p=*|--path=*) path="${1#*=}" ;;
		-m=*|--max-size=*) max_size="${1#*=}" ;;
		-k|--keep-files) keep_files=1 ;;
		-h|--help)
			echo "Usage: $(basename "$0") [OPTIONS]"
			echo "Backups all files given a certain maximum size from the root directory of this system."
			echo ""
			echo "OPTIONS"
			echo "  -V,   --version                 Prints the version of this script suite (MBX)."
			echo "  -v,   --verbose                 Prints verbose information."
			echo "  -p=*, --path=*                  Sets the path to the backup directory (default: $HOME/.sys-backup)."
			echo "  -m=*, --max-size=*              Sets the maximum size of every backuped file (default: 10M)."
			echo "  -k,   --keep-files              Keeps the old backup files that are not overwritten"
			echo "  -h,   --help                    Prints this help message."
			echo ""
			exit 0
			;;
		*) echo "Invalid command line flag $1" >&2 && exit 1 ;;
	esac
	shift
done
test $verbose && trap 'echo "◊ $BASH_COMMAND"' DEBUG
set -e

echo "» Creating backup directory ..."
mkdir -p "$path"
if test-command sudo; then
	sudo chmod 1700 "$path"
else
	chmod 1700 "$path"
fi

echo "» Backing up files ..."
excl=( "$path" /dev /proc /sys /tmp /run /mnt /media /lost+found )
if [[ "$(to-lower "$OSTYPE")" == "darwin"* ]]; then # MacOS
	excl+=( /Volumes /Network /System /Applications /AppleInternal .DS_Store .AppleDouble .LSOverride )
	opts="-aEH"
else # Others
	excl+=( /var/lib/lxcfs /var/lib/vz ) # proxmox dumps
	opts="-aAXH"
fi
(( $verbose )) && opts+="v"
if test-command sudo; then
	sudo rsync $opts --delete --max-size=$max_size --exclude="${excl[@]}" / "$path"
	(( $keep_files )) || sudo find "$path" -type f -size +$max_size -delete
else
	rsync $opts --delete --max-size=$max_size --exclude="${excl[@]}" / "$path"
	(( $keep_files )) || find "$path" -type f -size +$max_size -delete
fi

echo "» Securing backup directory ..."
if test-command sudo; then
	sudo chmod 0000 "$path"
else
	chmod 0000 "$path"
fi

set +e && trap - DEBUG && echo "» Done!"
